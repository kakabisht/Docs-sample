import os
import re
from github import Github
from openai import OpenAI

# Initialize OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def generate_alt_text(image_path: str) -> str:
    """
    Generate alt text for an image using OpenAI GPT-5-nano.
    """
    try:
        prompt = f"Write a short, descriptive alt text for an image file: {image_path}"
        response = client.chat.completions.create(
            model="gpt-5-nano",
            messages=[{"role": "user", "content": prompt}],
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ö†Ô∏è Error generating alt text for {image_path}: {e}")
        return None


def suggest_alt_text_for_file(file_path: str):
    """
    Parse a markdown file and suggest alt text for images without alt text.
    Returns a list of (image_path, alt_text).
    """
    suggestions = []
    image_pattern = re.compile(r'!\[\]\((.*?)\)')

    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    for line in lines:
        match = image_pattern.search(line)
        if match:
            image_path = match.group(1)
            alt_text = generate_alt_text(image_path)
            if alt_text:
                suggestions.append((image_path, alt_text))

    return suggestions


def post_comments(repo_name, pr_number, suggestions):
    """
    Post one GitHub PR comment per image alt text suggestion.
    """
    gh = Github(os.getenv("GITHUB_TOKEN"))
    repo = gh.get_repo(repo_name)
    pr = repo.get_pull(int(pr_number))

    for file_path, file_suggestions in suggestions.items():
        for image_path, alt_text in file_suggestions:
            body = (
                f"üñºÔ∏è Suggested alt text for **{file_path}** ‚Üí `{image_path}`:\n\n"
                f"`{alt_text}`\n\n"
                "_(Generated by CI bot)_"
            )
            pr.create_issue_comment(body)
            print(f"‚úÖ Posted comment for {image_path}")


if __name__ == "__main__":
    repo_name = os.getenv("GITHUB_REPOSITORY")
    pr_number = os.getenv("PR_NUMBER")

    # Collect suggestions
    suggestions = {}
    for root, _, files in os.walk("."):
        for file in files:
            if file.endswith(".md"):
                file_path = os.path.join(root, file)
                file_suggestions = suggest_alt_text_for_file(file_path)
                if file_suggestions:
                    suggestions[file_path] = file_suggestions

    if suggestions:
        post_comments(repo_name, pr_number, suggestions)
    else:
        print("‚ÑπÔ∏è No alt text suggestions generated.")
